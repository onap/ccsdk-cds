listenerservice:
  config:
    asdcAddress: ${asdcAddress:localhost:8443}
    messageBusAddress: ${messageBusAddress:localhost}
    user: ${sdcusername:cds}
    password: ${password:Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U}
    pollingInterval: ${pollingInterval:15}
    pollingTimeout: ${pollingTimeout:60}
    relevantArtifactTypes: ${relevantArtifactTypes:TOSCA_CSAR}
    consumerGroup: ${consumerGroup:cds-id-local}
    environmentName: ${environmentName:AUTO}
    consumerId: ${consumerId:cds-id-local}
    keyStorePassword: ${keyStorePassword}
    keyStorePath: ${keyStorePath}
    activateServerTLSAuth : ${activateServerTLSAuth:false}
    isUseHttpsWithDmaap: ${isUseHttpsWithDmaap:false}
    isUseHttpsWithSDC: ${isUseHttpsWithSDC:true}
    archivePath: ${archivePath:/opt/app/onap/cds-sdc-listener/}
    grpcAddress: ${grpcAddress:localhost}
    grpcPort: ${grpcPort:9111}
    authHeader: ${authHeader:Basic Y2NzZGthcHBzOmNjc2RrYXBwcw==}
    httpsProxyHost: ${httpsProxyHost:}
    httpProxyHost: ${httpProxyHost:}
    httpsProxyPort: ${httpsProxyPort:0}
    httpProxyPort: ${httpProxyPort:0}
#port needed by Liveness probe
server:
  port: ${healthcheckPort:9000}
#set spring.main.web-environment=false if you want to NOT to open a port for healthcheck.
spring:
  main:
    web-environment: ${sprintWebListenerEnabled:true}



cdslistener:
  healthcheck:
    baseUrl: http://localhost:9000/
#servicename = SDC Listener service and service link = /api/v1/sdclistener/healthcheck (this is used to check if sdclistener is up depending on all services status)
#if you want to add more service it will like [service-name,service-link],[],[]
    mapping-service-name-with-service-link: "[SDC Listener service,/api/v1/sdclistener/healthcheck]"

management:
  endpoint:
    health:
      show-details: always


  endpoints:
    web:
      exposure:
        include: "*"

endpoints:
  user:
    name: eHbVUbJAj4AG2522cSbrOQ==
    password: eHbVUbJAj4AG2522cSbrOQ==
