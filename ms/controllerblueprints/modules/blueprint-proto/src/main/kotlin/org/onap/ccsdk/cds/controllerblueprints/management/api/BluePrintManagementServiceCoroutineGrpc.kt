// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.onap.ccsdk.cds.controllerblueprints.management.api

import com.github.marcoferrer.krotoplus.coroutines.StubDefinition
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.ServiceScope
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnimplementedUnary
import com.github.marcoferrer.krotoplus.coroutines.withCoroutineContext
import io.grpc.BindableService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.stub.AbstractStub
import io.grpc.stub.StreamObserver
import io.grpc.stub.annotations.RpcMethod
import javax.annotation.Generated
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmStatic

@Generated(
        value = ["by Kroto+ Proto-c Plugin (version 0.5.0)"],
        comments = "Source: BluePrintManagement.proto"
)
object BluePrintManagementServiceCoroutineGrpc {
    const val SERVICE_NAME: String = BluePrintManagementServiceGrpc.SERVICE_NAME

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/downloadBlueprint",
            requestType = BluePrintDownloadInput::class,
            responseType = BluePrintManagementOutput::class,
            methodType = MethodDescriptor.MethodType.UNARY
    )
    val downloadBlueprintMethod: MethodDescriptor<BluePrintDownloadInput, BluePrintManagementOutput>
        get() = BluePrintManagementServiceGrpc.getDownloadBlueprintMethod()

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/uploadBlueprint",
            requestType = BluePrintUploadInput::class,
            responseType = BluePrintManagementOutput::class,
            methodType = MethodDescriptor.MethodType.UNARY
    )
    val uploadBlueprintMethod: MethodDescriptor<BluePrintUploadInput, BluePrintManagementOutput>
        get() = BluePrintManagementServiceGrpc.getUploadBlueprintMethod()

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/removeBlueprint",
            requestType = BluePrintRemoveInput::class,
            responseType = BluePrintManagementOutput::class,
            methodType = MethodDescriptor.MethodType.UNARY
    )
    val removeBlueprintMethod: MethodDescriptor<BluePrintRemoveInput, BluePrintManagementOutput>
        get() = BluePrintManagementServiceGrpc.getRemoveBlueprintMethod()

    fun newStub(channel: Channel): BluePrintManagementServiceCoroutineStub =
            BluePrintManagementServiceCoroutineStub.newStub(channel)
    suspend fun newStubWithContext(channel: Channel): BluePrintManagementServiceCoroutineStub =
            BluePrintManagementServiceCoroutineStub.newStubWithContext(channel)
    class BluePrintManagementServiceCoroutineStub private constructor(channel: Channel, callOptions:
            CallOptions = CallOptions.DEFAULT) :
            AbstractStub<BluePrintManagementServiceCoroutineStub>(channel, callOptions) {
        override fun build(channel: Channel, callOptions: CallOptions):
                BluePrintManagementServiceCoroutineStub =
                BluePrintManagementServiceCoroutineStub(channel,callOptions)

        suspend fun downloadBlueprint(request: BluePrintDownloadInput =
                BluePrintDownloadInput.getDefaultInstance()): BluePrintManagementOutput =
                clientCallUnary(request,
                BluePrintManagementServiceGrpc.getDownloadBlueprintMethod())

        suspend inline fun downloadBlueprint(block: BluePrintDownloadInput.Builder.() -> Unit):
                BluePrintManagementOutput {
            val request = BluePrintDownloadInput.newBuilder()
                .apply(block)
                .build()
            return downloadBlueprint(request)
        }

        suspend fun uploadBlueprint(request: BluePrintUploadInput =
                BluePrintUploadInput.getDefaultInstance()): BluePrintManagementOutput =
                clientCallUnary(request, BluePrintManagementServiceGrpc.getUploadBlueprintMethod())

        suspend inline fun uploadBlueprint(block: BluePrintUploadInput.Builder.() -> Unit):
                BluePrintManagementOutput {
            val request = BluePrintUploadInput.newBuilder()
                .apply(block)
                .build()
            return uploadBlueprint(request)
        }

        suspend fun removeBlueprint(request: BluePrintRemoveInput =
                BluePrintRemoveInput.getDefaultInstance()): BluePrintManagementOutput =
                clientCallUnary(request, BluePrintManagementServiceGrpc.getRemoveBlueprintMethod())

        suspend inline fun removeBlueprint(block: BluePrintRemoveInput.Builder.() -> Unit):
                BluePrintManagementOutput {
            val request = BluePrintRemoveInput.newBuilder()
                .apply(block)
                .build()
            return removeBlueprint(request)
        }

        companion object : StubDefinition<BluePrintManagementServiceCoroutineStub> {
            override val serviceName: String = BluePrintManagementServiceGrpc.SERVICE_NAME

            override fun newStub(channel: Channel): BluePrintManagementServiceCoroutineStub =
                    BluePrintManagementServiceCoroutineStub(channel)
            override suspend fun newStubWithContext(channel: Channel):
                    BluePrintManagementServiceCoroutineStub =
                    BluePrintManagementServiceCoroutineStub(channel).withCoroutineContext()}
    }

    abstract class BluePrintManagementServiceImplBase : BindableService, ServiceScope {
        private val delegate: ServiceDelegate = ServiceDelegate()

        override fun bindService(): ServerServiceDefinition = delegate.bindService()
        open suspend fun downloadBlueprint(request: BluePrintDownloadInput):
                BluePrintManagementOutput =
                serverCallUnimplementedUnary(BluePrintManagementServiceGrpc.getDownloadBlueprintMethod())

        open suspend fun uploadBlueprint(request: BluePrintUploadInput): BluePrintManagementOutput =
                serverCallUnimplementedUnary(BluePrintManagementServiceGrpc.getUploadBlueprintMethod())

        open suspend fun removeBlueprint(request: BluePrintRemoveInput): BluePrintManagementOutput =
                serverCallUnimplementedUnary(BluePrintManagementServiceGrpc.getRemoveBlueprintMethod())

        private inner class ServiceDelegate :
                BluePrintManagementServiceGrpc.BluePrintManagementServiceImplBase() {
            override fun downloadBlueprint(request: BluePrintDownloadInput, responseObserver:
                    StreamObserver<BluePrintManagementOutput>) {
                serverCallUnary(BluePrintManagementServiceGrpc.getDownloadBlueprintMethod(),responseObserver)
                        {
                    downloadBlueprint(request)
                }
            }

            override fun uploadBlueprint(request: BluePrintUploadInput, responseObserver:
                    StreamObserver<BluePrintManagementOutput>) {
                serverCallUnary(BluePrintManagementServiceGrpc.getUploadBlueprintMethod(),responseObserver)
                        {
                    uploadBlueprint(request)
                }
            }

            override fun removeBlueprint(request: BluePrintRemoveInput, responseObserver:
                    StreamObserver<BluePrintManagementOutput>) {
                serverCallUnary(BluePrintManagementServiceGrpc.getRemoveBlueprintMethod(),responseObserver)
                        {
                    removeBlueprint(request)
                }
            }
        }
    }
}
