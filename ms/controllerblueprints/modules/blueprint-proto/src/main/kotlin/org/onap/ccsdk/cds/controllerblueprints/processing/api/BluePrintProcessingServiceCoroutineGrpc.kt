// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.onap.ccsdk.cds.controllerblueprints.processing.api

import com.github.marcoferrer.krotoplus.coroutines.StubDefinition
import com.github.marcoferrer.krotoplus.coroutines.client.ClientBidiCallChannel
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallBidiStreaming
import com.github.marcoferrer.krotoplus.coroutines.server.ServiceScope
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallBidiStreaming
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnimplementedStream
import com.github.marcoferrer.krotoplus.coroutines.withCoroutineContext
import io.grpc.BindableService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.stub.AbstractStub
import io.grpc.stub.StreamObserver
import io.grpc.stub.annotations.RpcMethod
import javax.annotation.Generated
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmName
import kotlin.jvm.JvmStatic
import kotlinx.coroutines.channels.ReceiveChannel
import kotlinx.coroutines.channels.SendChannel

@Generated(
        value = ["by Kroto+ Proto-c Plugin (version 0.5.0)"],
        comments = "Source: BluePrintProcessing.proto"
)
object BluePrintProcessingServiceCoroutineGrpc {
    const val SERVICE_NAME: String = BluePrintProcessingServiceGrpc.SERVICE_NAME

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/process",
            requestType = ExecutionServiceInput::class,
            responseType = ExecutionServiceOutput::class,
            methodType = MethodDescriptor.MethodType.BIDI_STREAMING
    )
    val processMethod: MethodDescriptor<ExecutionServiceInput, ExecutionServiceOutput>
        get() = BluePrintProcessingServiceGrpc.getProcessMethod()

    fun newStub(channel: Channel): BluePrintProcessingServiceCoroutineStub =
            BluePrintProcessingServiceCoroutineStub.newStub(channel)
    suspend fun newStubWithContext(channel: Channel): BluePrintProcessingServiceCoroutineStub =
            BluePrintProcessingServiceCoroutineStub.newStubWithContext(channel)
    class BluePrintProcessingServiceCoroutineStub private constructor(channel: Channel, callOptions:
            CallOptions = CallOptions.DEFAULT) :
            AbstractStub<BluePrintProcessingServiceCoroutineStub>(channel, callOptions) {
        override fun build(channel: Channel, callOptions: CallOptions):
                BluePrintProcessingServiceCoroutineStub =
                BluePrintProcessingServiceCoroutineStub(channel,callOptions)

        fun process(): ClientBidiCallChannel<ExecutionServiceInput, ExecutionServiceOutput> =
                clientCallBidiStreaming(BluePrintProcessingServiceGrpc.getProcessMethod())

        companion object : StubDefinition<BluePrintProcessingServiceCoroutineStub> {
            override val serviceName: String = BluePrintProcessingServiceGrpc.SERVICE_NAME

            override fun newStub(channel: Channel): BluePrintProcessingServiceCoroutineStub =
                    BluePrintProcessingServiceCoroutineStub(channel)
            override suspend fun newStubWithContext(channel: Channel):
                    BluePrintProcessingServiceCoroutineStub =
                    BluePrintProcessingServiceCoroutineStub(channel).withCoroutineContext()}
    }

    abstract class BluePrintProcessingServiceImplBase : BindableService, ServiceScope {
        private val delegate: ServiceDelegate = ServiceDelegate()

        override fun bindService(): ServerServiceDefinition = delegate.bindService()
        open suspend fun process(requestChannel: ReceiveChannel<ExecutionServiceInput>,
                responseChannel: SendChannel<ExecutionServiceOutput>) {
            serverCallUnimplementedStream(
                BluePrintProcessingServiceGrpc.getProcessMethod(),
                responseChannel
            )
        }

        @JvmName("sendExecutionServiceOutput")
        suspend inline fun SendChannel<ExecutionServiceOutput>.send(block:
                ExecutionServiceOutput.Builder.() -> Unit) {
            val response = ExecutionServiceOutput.newBuilder()
                .apply(block)
                .build()
            send(response)
        }

        private inner class ServiceDelegate :
                BluePrintProcessingServiceGrpc.BluePrintProcessingServiceImplBase() {
            override fun process(responseObserver: StreamObserver<ExecutionServiceOutput>):
                    StreamObserver<ExecutionServiceInput> {
                val requestChannel = serverCallBidiStreaming(
                    BluePrintProcessingServiceGrpc.getProcessMethod(),
                    responseObserver
                ) { requestChannel: ReceiveChannel<ExecutionServiceInput>,
                    responseChannel: SendChannel<ExecutionServiceOutput> ->
                    
                    process(requestChannel, responseChannel)
                }
                return requestChannel 
            }
        }
    }
}
