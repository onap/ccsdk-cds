// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
@file:JvmName("-BluePrintManagementServiceRpcOverloads")

package org.onap.ccsdk.cds.controllerblueprints.management.api

import com.github.marcoferrer.krotoplus.coroutines.client.clientCallUnary
import com.google.common.util.concurrent.ListenableFuture
import io.grpc.stub.StreamObserver
import kotlin.Unit
import kotlin.jvm.JvmName
import org.onap.ccsdk.cds.controllerblueprints.management.api.BluePrintManagementServiceGrpc.BluePrintManagementServiceBlockingStub
import org.onap.ccsdk.cds.controllerblueprints.management.api.BluePrintManagementServiceGrpc.BluePrintManagementServiceFutureStub
import org.onap.ccsdk.cds.controllerblueprints.management.api.BluePrintManagementServiceGrpc.BluePrintManagementServiceStub

inline fun BluePrintManagementServiceStub.downloadBlueprint(responseObserver:
        StreamObserver<BluePrintManagementOutput>, block: BluePrintDownloadInput.Builder.() -> Unit)
        {
    val request = BluePrintDownloadInput.newBuilder()
        .apply(block)
        .build()
    downloadBlueprint(request, responseObserver)
}

inline fun BluePrintManagementServiceFutureStub.downloadBlueprint(block:
        BluePrintDownloadInput.Builder.() -> Unit): ListenableFuture<BluePrintManagementOutput> {
    val request = BluePrintDownloadInput.newBuilder()
        .apply(block)
        .build()
    return downloadBlueprint(request)
}

inline fun BluePrintManagementServiceBlockingStub.downloadBlueprint(block:
        BluePrintDownloadInput.Builder.() -> Unit): BluePrintManagementOutput {
    val request = BluePrintDownloadInput.newBuilder()
        .apply(block)
        .build()
    return downloadBlueprint(request)
}

fun BluePrintManagementServiceStub.downloadBlueprint(responseObserver:
        StreamObserver<BluePrintManagementOutput>) {
    downloadBlueprint(BluePrintDownloadInput.getDefaultInstance(),responseObserver)
}

fun BluePrintManagementServiceFutureStub.downloadBlueprint():
        ListenableFuture<BluePrintManagementOutput> =
        downloadBlueprint(BluePrintDownloadInput.getDefaultInstance())

fun BluePrintManagementServiceBlockingStub.downloadBlueprint(): BluePrintManagementOutput =
        downloadBlueprint(BluePrintDownloadInput.getDefaultInstance())

suspend fun BluePrintManagementServiceStub.downloadBlueprint(request: BluePrintDownloadInput =
        BluePrintDownloadInput.getDefaultInstance()): BluePrintManagementOutput =
        clientCallUnary(request, BluePrintManagementServiceGrpc.getDownloadBlueprintMethod())

suspend inline fun BluePrintManagementServiceStub.downloadBlueprint(block:
        BluePrintDownloadInput.Builder.() -> Unit): BluePrintManagementOutput {
    val request = BluePrintDownloadInput.newBuilder()
        .apply(block)
        .build()
    return downloadBlueprint(request)
}

inline fun BluePrintManagementServiceStub.uploadBlueprint(responseObserver:
        StreamObserver<BluePrintManagementOutput>, block: BluePrintUploadInput.Builder.() -> Unit) {
    val request = BluePrintUploadInput.newBuilder()
        .apply(block)
        .build()
    uploadBlueprint(request, responseObserver)
}

inline fun BluePrintManagementServiceFutureStub.uploadBlueprint(block:
        BluePrintUploadInput.Builder.() -> Unit): ListenableFuture<BluePrintManagementOutput> {
    val request = BluePrintUploadInput.newBuilder()
        .apply(block)
        .build()
    return uploadBlueprint(request)
}

inline fun BluePrintManagementServiceBlockingStub.uploadBlueprint(block:
        BluePrintUploadInput.Builder.() -> Unit): BluePrintManagementOutput {
    val request = BluePrintUploadInput.newBuilder()
        .apply(block)
        .build()
    return uploadBlueprint(request)
}

fun BluePrintManagementServiceStub.uploadBlueprint(responseObserver:
        StreamObserver<BluePrintManagementOutput>) {
    uploadBlueprint(BluePrintUploadInput.getDefaultInstance(),responseObserver)
}

fun BluePrintManagementServiceFutureStub.uploadBlueprint():
        ListenableFuture<BluePrintManagementOutput> =
        uploadBlueprint(BluePrintUploadInput.getDefaultInstance())

fun BluePrintManagementServiceBlockingStub.uploadBlueprint(): BluePrintManagementOutput =
        uploadBlueprint(BluePrintUploadInput.getDefaultInstance())

suspend fun BluePrintManagementServiceStub.uploadBlueprint(request: BluePrintUploadInput =
        BluePrintUploadInput.getDefaultInstance()): BluePrintManagementOutput =
        clientCallUnary(request, BluePrintManagementServiceGrpc.getUploadBlueprintMethod())

suspend inline fun BluePrintManagementServiceStub.uploadBlueprint(block:
        BluePrintUploadInput.Builder.() -> Unit): BluePrintManagementOutput {
    val request = BluePrintUploadInput.newBuilder()
        .apply(block)
        .build()
    return uploadBlueprint(request)
}

inline fun BluePrintManagementServiceStub.removeBlueprint(responseObserver:
        StreamObserver<BluePrintManagementOutput>, block: BluePrintRemoveInput.Builder.() -> Unit) {
    val request = BluePrintRemoveInput.newBuilder()
        .apply(block)
        .build()
    removeBlueprint(request, responseObserver)
}

inline fun BluePrintManagementServiceFutureStub.removeBlueprint(block:
        BluePrintRemoveInput.Builder.() -> Unit): ListenableFuture<BluePrintManagementOutput> {
    val request = BluePrintRemoveInput.newBuilder()
        .apply(block)
        .build()
    return removeBlueprint(request)
}

inline fun BluePrintManagementServiceBlockingStub.removeBlueprint(block:
        BluePrintRemoveInput.Builder.() -> Unit): BluePrintManagementOutput {
    val request = BluePrintRemoveInput.newBuilder()
        .apply(block)
        .build()
    return removeBlueprint(request)
}

fun BluePrintManagementServiceStub.removeBlueprint(responseObserver:
        StreamObserver<BluePrintManagementOutput>) {
    removeBlueprint(BluePrintRemoveInput.getDefaultInstance(),responseObserver)
}

fun BluePrintManagementServiceFutureStub.removeBlueprint():
        ListenableFuture<BluePrintManagementOutput> =
        removeBlueprint(BluePrintRemoveInput.getDefaultInstance())

fun BluePrintManagementServiceBlockingStub.removeBlueprint(): BluePrintManagementOutput =
        removeBlueprint(BluePrintRemoveInput.getDefaultInstance())

suspend fun BluePrintManagementServiceStub.removeBlueprint(request: BluePrintRemoveInput =
        BluePrintRemoveInput.getDefaultInstance()): BluePrintManagementOutput =
        clientCallUnary(request, BluePrintManagementServiceGrpc.getRemoveBlueprintMethod())

suspend inline fun BluePrintManagementServiceStub.removeBlueprint(block:
        BluePrintRemoveInput.Builder.() -> Unit): BluePrintManagementOutput {
    val request = BluePrintRemoveInput.newBuilder()
        .apply(block)
        .build()
    return removeBlueprint(request)
}
