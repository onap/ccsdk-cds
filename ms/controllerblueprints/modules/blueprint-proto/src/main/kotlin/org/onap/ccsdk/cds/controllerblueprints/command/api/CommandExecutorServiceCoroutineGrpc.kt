// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.onap.ccsdk.cds.controllerblueprints.command.api

import com.github.marcoferrer.krotoplus.coroutines.StubDefinition
import com.github.marcoferrer.krotoplus.coroutines.client.clientCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.ServiceScope
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnary
import com.github.marcoferrer.krotoplus.coroutines.server.serverCallUnimplementedUnary
import com.github.marcoferrer.krotoplus.coroutines.withCoroutineContext
import io.grpc.BindableService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.stub.AbstractStub
import io.grpc.stub.StreamObserver
import io.grpc.stub.annotations.RpcMethod
import javax.annotation.Generated
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmStatic

@Generated(
        value = ["by Kroto+ Proto-c Plugin (version 0.5.0)"],
        comments = "Source: CommandExecutor.proto"
)
object CommandExecutorServiceCoroutineGrpc {
    const val SERVICE_NAME: String = CommandExecutorServiceGrpc.SERVICE_NAME

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/prepareEnv",
            requestType = PrepareEnvInput::class,
            responseType = ExecutionOutput::class,
            methodType = MethodDescriptor.MethodType.UNARY
    )
    val prepareEnvMethod: MethodDescriptor<PrepareEnvInput, ExecutionOutput>
        get() = CommandExecutorServiceGrpc.getPrepareEnvMethod()

    @JvmStatic
    @get:RpcMethod(
            fullMethodName = "$SERVICE_NAME/executeCommand",
            requestType = ExecutionInput::class,
            responseType = ExecutionOutput::class,
            methodType = MethodDescriptor.MethodType.UNARY
    )
    val executeCommandMethod: MethodDescriptor<ExecutionInput, ExecutionOutput>
        get() = CommandExecutorServiceGrpc.getExecuteCommandMethod()

    fun newStub(channel: Channel): CommandExecutorServiceCoroutineStub =
            CommandExecutorServiceCoroutineStub.newStub(channel)
    suspend fun newStubWithContext(channel: Channel): CommandExecutorServiceCoroutineStub =
            CommandExecutorServiceCoroutineStub.newStubWithContext(channel)
    class CommandExecutorServiceCoroutineStub private constructor(channel: Channel, callOptions:
            CallOptions = CallOptions.DEFAULT) :
            AbstractStub<CommandExecutorServiceCoroutineStub>(channel, callOptions) {
        override fun build(channel: Channel, callOptions: CallOptions):
                CommandExecutorServiceCoroutineStub =
                CommandExecutorServiceCoroutineStub(channel,callOptions)

        suspend fun prepareEnv(request: PrepareEnvInput = PrepareEnvInput.getDefaultInstance()):
                ExecutionOutput = clientCallUnary(request,
                CommandExecutorServiceGrpc.getPrepareEnvMethod())

        suspend inline fun prepareEnv(block: PrepareEnvInput.Builder.() -> Unit): ExecutionOutput {
            val request = PrepareEnvInput.newBuilder()
                .apply(block)
                .build()
            return prepareEnv(request)
        }

        suspend fun executeCommand(request: ExecutionInput = ExecutionInput.getDefaultInstance()):
                ExecutionOutput = clientCallUnary(request,
                CommandExecutorServiceGrpc.getExecuteCommandMethod())

        suspend inline fun executeCommand(block: ExecutionInput.Builder.() -> Unit): ExecutionOutput
                {
            val request = ExecutionInput.newBuilder()
                .apply(block)
                .build()
            return executeCommand(request)
        }

        companion object : StubDefinition<CommandExecutorServiceCoroutineStub> {
            override val serviceName: String = CommandExecutorServiceGrpc.SERVICE_NAME

            override fun newStub(channel: Channel): CommandExecutorServiceCoroutineStub =
                    CommandExecutorServiceCoroutineStub(channel)
            override suspend fun newStubWithContext(channel: Channel):
                    CommandExecutorServiceCoroutineStub =
                    CommandExecutorServiceCoroutineStub(channel).withCoroutineContext()}
    }

    abstract class CommandExecutorServiceImplBase : BindableService, ServiceScope {
        private val delegate: ServiceDelegate = ServiceDelegate()

        override fun bindService(): ServerServiceDefinition = delegate.bindService()
        open suspend fun prepareEnv(request: PrepareEnvInput): ExecutionOutput =
                serverCallUnimplementedUnary(CommandExecutorServiceGrpc.getPrepareEnvMethod())

        open suspend fun executeCommand(request: ExecutionInput): ExecutionOutput =
                serverCallUnimplementedUnary(CommandExecutorServiceGrpc.getExecuteCommandMethod())

        private inner class ServiceDelegate :
                CommandExecutorServiceGrpc.CommandExecutorServiceImplBase() {
            override fun prepareEnv(request: PrepareEnvInput, responseObserver:
                    StreamObserver<ExecutionOutput>) {
                serverCallUnary(CommandExecutorServiceGrpc.getPrepareEnvMethod(),responseObserver) {
                    prepareEnv(request)
                }
            }

            override fun executeCommand(request: ExecutionInput, responseObserver:
                    StreamObserver<ExecutionOutput>) {
                serverCallUnary(CommandExecutorServiceGrpc.getExecuteCommandMethod(),responseObserver)
                        {
                    executeCommand(request)
                }
            }
        }
    }
}
