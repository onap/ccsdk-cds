<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2019 Bell Canada. All rights reserved.
  ~
  ~ NOTICE:  All the intellectual and technical concepts contained herein are
  ~ proprietary to Bell Canada and are protected by trade secret or copyright law.
  ~ Unauthorized copying of this file, via any medium is strictly prohibited.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <parent>
    <groupId>org.onap.ccsdk.parent</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.2.2-SNAPSHOT</version>
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <artifactId>cds-sdc-listener-application</artifactId>
  <version>0.4.2-SNAPSHOT</version>
  <name>CDS-SDC Listener Application </name>

  <properties>
    <grpc.version>1.17.1</grpc.version>
    <protobuf.version>3.6.1</protobuf.version>
    <image.name>cds-sdc-listener</image.name>
    <docker.push.phase>deploy</docker.push.phase>
    <project.version>${parent.version}</project.version>
    <!-- Start of Docker Related Properties -->
    <docker.fabric.version>0.26.1</docker.fabric.version>
    <!-- Default docker registry that maven fabric plugin will try to pull from -->
    <docker.registry>docker.io</docker.registry>
    <!-- Specifying the docker push registry where the image should be pushed -->
    <!-- This value should be overwritten at runtime to wherever need to be pushed to -->
    <docker.push.registry>localhost:5000</docker.push.registry>
    <aai.docker.namespace>nso-images</aai.docker.namespace>
  </properties>

  <dependencies>
    <!-- Spring boot -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- SDC Distribution client dependency -->
    <dependency>
      <groupId>org.onap.sdc.sdc-distribution-client</groupId>
      <artifactId>sdc-distribution-client</artifactId>
      <version>1.3.0</version>
    </dependency>

    <dependency>
      <groupId>org.jmockit</groupId>
      <artifactId>jmockit</artifactId>
      <version>1.19</version>
      <scope>test</scope>
    </dependency>

    <!-- GRPC Dependencies -->
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>${grpc.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${protobuf.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-testing</artifactId>
      <version>${grpc.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.onap.ccsdk.cds.components</groupId>
      <artifactId>proto-definition</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>io.projectreactor</groupId>
      <artifactId>reactor-core</artifactId>
      <version>3.2.6.RELEASE</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>repackage</id>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <configuration>
              <target>
                <echo>ANT TASK - copying Docker files</echo>
                <copy todir="${basedir}/target/docker-stage" overwrite="true" flatten="true">
                  <fileset dir="${basedir}/src/main/docker" >
                    <include name="Dockerfile" />
                    <include name="start.sh" />
                  </fileset>
                  <fileset dir="${basedir}/target" >
                    <include name="*.jar" />
                  </fileset>
                  <fileset dir="${basedir}/src/main/resources/" >
                    <include name="application.yml" />
                  </fileset>
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.fabric.version}</version>
            <inherited>false</inherited>
            <configuration>
              <images>
                <image>
                  <name>${docker.push.registry}/${aai.docker.namespace}/${project.artifactId}:%v</name>
                  <build>
                    <cleanup>try</cleanup>
                    <dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
                    <tags>
                      <tag>${project.version}</tag>
                    </tags>
                  </build>
                </image>
              </images>
              <verbose>true</verbose>
            </configuration>
            <executions>
              <execution>
                <id>generate-images</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>push-images</id>
                <phase>${docker.push.phase}</phase>
                <goals>
                  <goal>build</goal>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
