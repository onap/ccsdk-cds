{
  "comments": [
    {
      "key": {
        "uuid": "28a03374_92bdc3bf",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/data/ErrorCodeModel.kt",
        "patchSetId": 17
      },
      "lineNbr": 33,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "indentation is wrong",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3c45726_7cce540b",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/domain/ErrorMessageModel.kt",
        "patchSetId": 17
      },
      "lineNbr": 39,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "Do we really need to use a Lob for cause and action? It seems a little bit excessive, usually Lob are meant for binary data or very big strings.",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 8
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3ca2cd0_f4fa16f6",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/domain/ErrorMessageModel.kt",
        "patchSetId": 17
      },
      "lineNbr": 42,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 8
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1956caf9_51ff0cc7",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/domain/ErrorMessageModel.kt",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "declaration on new line for consistency",
      "range": {
        "startLine": 37,
        "startChar": 3,
        "endLine": 43,
        "endChar": 52
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef900393_f5d7c69f",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/interfaces/ErrorPayload.kt",
        "patchSetId": 17
      },
      "lineNbr": 34,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "not sure if this default value is used or not but if it is please change it to UTC. And use the same format as we do in BlueprintProcessorData for consistency (it already uses UTC)",
      "range": {
        "startLine": 34,
        "startChar": 35,
        "endLine": 34,
        "endChar": 54
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c34843a_e24d766e",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/service/ErrorCatalogDatabaseHandler.kt",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "why not use string interpolation, there\u0027s so many () for no reason? Also do we really need a constant that contains 21 characters to replace \u0027.\u0027? Considering it\u0027s private and used only once? i feel like \"${domain.name}.${errorMessageFound.messageID}\" is much clearer.",
      "range": {
        "startLine": 73,
        "startChar": 30,
        "endLine": 73,
        "endChar": 105
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7557311_c29f7dfe",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/service/ErrorCatalogService.kt",
        "patchSetId": 17
      },
      "lineNbr": 41,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "We should not return a nullable object here. if we can\u0027t find the error in the repository we should return an empty object saying \"unable to find the error\". Otherwise every time it gets called we need to check for null. If the object is null the logic will probably be \"unable to find the error\" anyway (or we just swallow and it\u0027s even worst). Why not put this logic at one place so we don\u0027t have to do it everywhere else we want to use the error catalog.",
      "range": {
        "startLine": 41,
        "startChar": 70,
        "endLine": 41,
        "endChar": 71
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36981a97_450bba7e",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/service/ErrorMessagesLibDBService.kt",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "use string interpolation, much easier to read than + and plus. We should consider returning the object instead because it seems like we have two meaning \"cause\" and \"action\". We should not bury that information in a string otherwise it makes it hard retrieve that after. We should format it only when we want to log it (toString override?)",
      "range": {
        "startLine": 73,
        "startChar": 12,
        "endLine": 73,
        "endChar": 89
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41758bd2_52ddc5b1",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/service/ErrorMessagesLibPropertyService.kt",
        "patchSetId": 17
      },
      "lineNbr": 62,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "We should not throw an exception in the finally clause. We should check if null before closing there. If we want to throw an exception it should be done in the try (where we already handle exceptions and decided to simply log the error). We should simply use inputStream?.close() here",
      "range": {
        "startLine": 62,
        "startChar": 12,
        "endLine": 62,
        "endChar": 33
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f34042fb_273ddd3d",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/service/ErrorMessagesLibService.kt",
        "patchSetId": 17
      },
      "lineNbr": 20,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "We should try to avoid nullable variable as much as we can, it\u0027s not idiomatic for kotlin and we should try to avoid it so we don\u0027t get NPE. This is a big advantage of kotlin let\u0027s not go back java problems.",
      "range": {
        "startLine": 20,
        "startChar": 60,
        "endLine": 20,
        "endChar": 61
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32a60bf5_020f842a",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/service/ErrorMessagesLibService.kt",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 22,
        "startChar": 50,
        "endLine": 22,
        "endChar": 51
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36c3bc24_058dd2a4",
        "filename": "error-catalog-lib/src/main/kotlin/org/onap/ccsdk/error/catalog/utils/ErrorCatalogUtils.kt",
        "patchSetId": 17
      },
      "lineNbr": 30,
      "author": {
        "id": 5732
      },
      "writtenOn": "2020-02-26T22:15:58Z",
      "side": 1,
      "message": "This should not be needed why do we have to parse a string that we generate internally. It should be an object that is returned. For logging we override the toString method on the object and for the payload we just serialize the object as JSON so the caller will have the cause and action separately.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 30,
        "endChar": 5
      },
      "revId": "22e9cf2a2d87c7fc3d3f65bccef8c9a4e4bdd59a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}